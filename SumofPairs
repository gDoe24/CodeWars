Given a list of integers and a single sum value, return the first two values (parse from the left please) in order of appearance that add up to form the sum.

sum_pairs([11, 3, 7, 5],         10)
#              ^--^      3 + 7 = 10
== [3, 7]

sum_pairs([4, 3, 2, 3, 4],         6)
#          ^-----^         4 + 2 = 6, indices: 0, 2 *
#             ^-----^      3 + 3 = 6, indices: 1, 3
#                ^-----^   2 + 4 = 6, indices: 2, 4
#  * entire pair is earlier, and therefore is the correct answer
== [4, 2]

sum_pairs([0, 0, -2, 3], 2)
#  there are no pairs of values that can be added to produce 2.
== None/nil/undefined (Based on the language)

sum_pairs([10, 5, 2, 3, 7, 5],         10)
#              ^-----------^   5 + 5 = 10, indices: 1, 5
#                    ^--^      3 + 7 = 10, indices: 3, 4 *
#  * entire pair is earlier, and therefore is the correct answer
== [3, 7]


//SOLUTION

//The principle hurdle in this problem is that you will not be able to pass the test using more brute force techniques.
//The creator of this kata made sure to include a test that would essentially break your code if you do not use 
//a method to minimize the time it takes to execute individual equations in your function.
//Enter memoization.
//Memoization refers to caching previously executed code to reduce the run time and make your function lighter to use.
//While a brute force method could be used here, it will be costly and take up too much time and space.

//Here our first step is to use a for loop to iterate through the array passed in ints. When we first start iterating through
//the array, we are caching every number that we iterate through and assigning it to the dictionary (cache). Then as we go
//along in our iteration, we are going to subtract i from s to see what number we need to add i to equal s.
//From there, we check to see if that number we need has already been cached and if not then we move to the next integer in the array
//caching the previous into our dictionary.

function sum_pairs(ints,s){
//set up dictionary to cache integers
    let cache = {};
    for (let i of ints){
            var newKey = i;
            var need = s-newKey;
            //check our cache for the necessary integer to return. Otherwise, add i to the cache.
            if (need in cache){
                return [need,newKey]
            }
            
            else{
            
            var num = i;
            cache[newKey]=num;
          }
    }
    return undefined
     
    }
