John has invited some friends. His list is:

s = "Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill";
Could you make a program that

makes this string uppercase
gives it sorted in alphabetical order by last name.
When the last names are the same, sort them by first name. Last name and first name of a guest come in the result between parentheses separated by a comma.

So the result of function meeting(s) will be:

"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL, WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)"
It can happen that in two distinct families with the same family name two people have the same first name too.

Test:
meeting("Alexis:Wahl;John:Bell;Victoria:Schwarz;Abba:Dorny;Grace:Meta;Ann:Arno;Madison:STAN;Alex:Cornwell;Lewis:Kern;Megan:Stan;Alex:Korn"
            )
            
            
Solution:

function meeting(s) {
    
    var newS = s.toUpperCase().split(/[\s: ;]+/);
    var obj = [];
    for (let i=0;i<newS.length;i+=2){
        var kobe = ['('+newS[i+1]+','+newS[i]+')'];
        obj.push(kobe);
    }
    return obj.sort().join('');
}

  For this Kata, my plan was to split both of the original separators given (; and :). After that, I wanted to iterate through the array and push
the i and i+1 to a new array. I could have used map(), and I tried to, but for some reason the function was not iterating how I expected and 
it easier to use a for loop. At the end, I sorted the array and joined the objects in order to fit the proper syntax.
